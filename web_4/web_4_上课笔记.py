"""
一、Cookie
服务器使用 cookie 来简单的验证用户的身份(等于是在返回信息时打上一个标签)
服务器返回 Cookie 字段
浏览器会解析 Cookie，然后提取 Cookie 的内容；然后下一次浏览器向服务器发请求的时候，浏览器会把 Cookie 一起发送(Set-Cookie字段)，服务器就能据此判断请求的对象是谁
也是通信协议规定的：服务器返回 Cookie，浏览器发送 Set-Cookie

cookie 每次浏览器重新启动的时候，就会被清零

二、Session
定义：在服务器端保存的客户数据
Cookie 很容易被伪造
Session 就可以解决这个问题：服务器在服务器端生成一个随机字符串返回给浏览器；因为是随机的，所以很难猜到别人的随机字符串是什么，所以也就不容易伪造。
但是如果把别人的随机字符串偷过来，你还是可以伪装成他，只不过是没有 Cookie 那么容易

session 持久化（重启后仍然可以使用的方式）：1.保存到文件；2.对称加密（服务器有一个密码，使用密码加密 cookie，浏览器每次用密码发送 cookie）
session 共享：一系列网站共享一个 cookie

代码中的 session：
用户 - login 页面 发送 username 和 password
服务器 - 生成一个随机字符串，在随机字符串和 username 之间建立映射，返回随机字符串作为 cookie

三、如何调试代码
1，确定错误的根源（找到错误在哪里），写一点测一点，写几行测几行，确保及早发现问题
2，用二分法来查找问题的根源（在合适的地方插入print）
3，用 print 来查看代码是否被运行
4，用 print 来查看代码是否是我们预期的值

四、隐式转换
比如：True = 1，False = 0
对象真值的例子：
‘spam’（或其他任意字符串）     True
""（空字符串）                False
[]                          False
{}                          False
1                           True
0.0                         False
None                        False

五、数据泄露风险
我们在向服务器发送数据的时候，会经过若干次转发，这其中数据就可能被劫持，造成泄露。
解决方法：通过 Https 进行加密。在这种情况下，仅拦截数据并不能获取你的隐私，因为劫持方无法破解。
"""
